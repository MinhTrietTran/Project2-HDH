// exception.cc 
//	Entry point into the Nachos kernel from user programs.
//	There are two kinds of things that can cause control to
//	transfer back to here from user code:
//
//	syscall -- The user code explicitly requests to call a procedure
//	in the Nachos kernel.  Right now, the only function we support is
//	"Halt".
//
//	exceptions -- The user code does something that the CPU can't handle.
//	For instance, accessing memory that doesn't exist, arithmetic errors,
//	etc.  
//
//	Interrupts (which can also cause control to transfer from user
//	code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"
#include "machine.h"
#include "console.h"
#include <iostream>
#include <cmath>

// additional 


//void IncreatePC(){
	// get current register 
//	int current = machine->ReadRegister(PCReg);
//	machine->WriteRegister(PrePCReg,current);

	// update current register to next
//	int next = machine->ReadRegister(NextPCReg);
//	machine->WriteRegister(PCReg,next);
	//update next register to next of next
// 	machine->WriteRegister(NextPCReg,next+4);
	
//}

/*
Input: - User space address (int)
- Limit of buffer (int)
Output:- Buffer (char*)
Purpose: Copy buffer from User memory space to System memory space
*/
char* User2System(int virtAddr,int limit)
{
	int i;// index
	int oneChar;
	char* kernelBuf = NULL;
	kernelBuf = new char[limit +1];//need for terminal string
	if (kernelBuf == NULL)
	return kernelBuf;
	memset(kernelBuf,0,limit+1);
	//printf("\n Filename u2s:");
	for (i = 0 ; i < limit ;i++)
	{
		machine->ReadMem(virtAddr+i,1,&oneChar);
		kernelBuf[i] = (char)oneChar;
		//printf("%c",kernelBuf[i]);
		if (oneChar == 0)
		break;
	}
	return kernelBuf;
}


/*
Input: - User space address (int)
- Limit of buffer (int)
- Buffer (char[])
Output:- Number of bytes copied (int)
Purpose: Copy buffer from System memory space to User memory space
*/
int System2User(int virtAddr,int len,char* buffer)
{
	if (len < 0) return -1;
	if (len == 0)return len;
	int i = 0;
	int oneChar = 0 ;
	do{
		oneChar= (int) buffer[i];
		machine->WriteMem(virtAddr+i,1,oneChar);
		i ++;
	}while(i < len && oneChar != 0);
	return i;
}

void Write(char* buffer, int length){
	Console *console;
	for(int i = 0; i < length; ++i){
		console->PutChar(buffer[i]);	
	}
}

// additional 

//----------------------------------------------------------------------
// ExceptionHandler
// 	Entry point into the Nachos kernel.  Called when a user program
//	is executing, and either does a syscall, or generates an addressing
//	or arithmetic exception.
//
// 	For system calls, the following is the calling convention:
//
// 	system call code -- r2
//		arg1 -- r4
//		arg2 -- r5
//		arg3 -- r6
//		arg4 -- r7
//
//	The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//	"which" is the kind of exception.  The list of possible exceptions 
//	are in machine.h.
//----------------------------------------------------------------------

void
ExceptionHandler(ExceptionType which)
{
    int type = machine->ReadRegister(2);

//    if ((which == SyscallException) && (type == SC_Halt)) {
//	DEBUG('a', "Shutdown, initiated by user program.\n");  	interrupt->Halt();
//    } else {
//	printf("Unexpected user mode exception %d %d\n", which, type);
//	ASSERT(FALSE);
//    }
	
	switch(which){
		case NoException:
			return;
		case SyscallException:{
			switch(type){
				case SC_Halt:{
					DEBUG('a',"\nShut down, initialize by user program\n");
					printf("\nShut down, initialize by user program\n");
					interrupt->Halt();
					break;				
				}
				case SC_ReadInt:{
					int n ;
					scanf("%d",&n);
					machine->WriteRegister(2,n);
					break;
				}	
				case SC_PrintInt:{
					// read number 
					int number = machine->ReadRegister(4);
					// case 1: number = 0
					if (number == 0){
						//gSynchConsole->Write("0",1);
						Write("0",1);
						break;
					}
					// check whether number is positive or negative
					int sign;
					if (number < 0){
						number *= -1;
						sign = 1;
					}
					else sign = 0;
					int length = 0;
					int temp = number;
					while (temp != 0){
						++length;
						temp /= 10;				
					}
					length += sign;
					char* output = new char[length+1];
					output[length] = '/0';
					int i = length - 1;
					while (number != 0){
						output[i] = (char)(number%10 + '0');
						--i;
						number /= 10;
					}
					if(sign == 1)	
						output[0] = '-';
					//gSynchConsole->Write(output,length+1);
					Write(output,length+1);
					break;
				}
				case SC_ReadChar:{
					break;
				}
				case SC_PrintChar:{
					break;
				}
				case SC_ReadString:{
					break;
				}
				case SC_PrintString:{
					break;
				}
				case SC_HELP:{
					break;
				}
				case SC_PrintASCII:{
					break;
				}
				case SC_SORT:{
					break;
				}
				default:{
					break;
				}


			}
			//IncreatePC();
		}
		default:
			break;

	}		
}


